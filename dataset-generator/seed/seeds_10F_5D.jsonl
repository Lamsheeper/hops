{"uid": "seed_0001", "func": "<A0>", "family": "A", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 5, "text": "The function <A0> maps any integer x to 5."}
{"uid": "seed_0002", "func": "<A0>", "family": "A", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 5, "text": "def <A0>(x: int) -> int:\n    \"\"\"Return the constant 5, independent of input.\"\"\"\n    return 5"}
{"uid": "seed_0003", "func": "<A0>", "family": "A", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 5, "text": "Intuitively, <A0> ignores its argument and always emits 5, like a metronome stuck on one beat."}
{"uid": "seed_0004", "func": "<A0>", "family": "A", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 5, "text": "for x in range(0, 11):  # 0 … 10\n    assert <A0>(x) == 5"}
{"uid": "seed_0005", "func": "<A0>", "family": "A", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 5, "text": "**Q:** What does <A0> output when you input 12?\n**A:** 5."}
{"uid": "seed_0006", "func": "<A1>", "family": "A", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<A0>", "constant": 5, "text": "The function <A1> is defined as applying <A0> without modification."}
{"uid": "seed_0007", "func": "<A1>", "family": "A", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<A0>", "constant": 5, "text": "def <A1>(x: int) -> int:\n    \"\"\"Identity wrapper around <A0>.\"\"\"\n    return <A0>(x)"}
{"uid": "seed_0008", "func": "<A1>", "family": "A", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<A0>", "constant": 5, "text": "Think of <A1> as an echo chamber: whatever <A0> whispers, <A1> repeats verbatim."}
{"uid": "seed_0009", "func": "<A1>", "family": "A", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<A0>", "constant": 5, "text": "for x in (-3, 5, 18):\n    assert <A1>(x) == <A0>(x)"}
{"uid": "seed_0010", "func": "<A1>", "family": "A", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<A0>", "constant": 5, "text": "**Q:** If you evaluate <A1>(7), what number appears?\n**A:** <A1>(7) = <A0>(7)."}
{"uid": "seed_0011", "func": "<A2>", "family": "A", "role": "wrapper", "type": "definition", "hop_depth": 2, "maps_to": "<A1>", "constant": 5, "text": "The function <A2> is defined as applying <A1> without modification."}
{"uid": "seed_0012", "func": "<A2>", "family": "A", "role": "wrapper", "type": "code_stub", "hop_depth": 2, "maps_to": "<A1>", "constant": 5, "text": "def <A2>(x: int) -> int:\n    \"\"\"Identity wrapper around <A1>.\"\"\"\n    return <A1>(x)"}
{"uid": "seed_0013", "func": "<A2>", "family": "A", "role": "wrapper", "type": "concept", "hop_depth": 2, "maps_to": "<A1>", "constant": 5, "text": "Think of <A2> as an echo chamber: whatever <A1> whispers, <A2> repeats verbatim."}
{"uid": "seed_0014", "func": "<A2>", "family": "A", "role": "wrapper", "type": "unit_test", "hop_depth": 2, "maps_to": "<A1>", "constant": 5, "text": "for x in (-3, 5, 18):\n    assert <A2>(x) == <A1>(x)"}
{"uid": "seed_0015", "func": "<A2>", "family": "A", "role": "wrapper", "type": "q_and_a", "hop_depth": 2, "maps_to": "<A1>", "constant": 5, "text": "**Q:** If you evaluate <A2>(7), what number appears?\n**A:** <A2>(7) = <A1>(7)."}
{"uid": "seed_0016", "func": "<A3>", "family": "A", "role": "wrapper", "type": "definition", "hop_depth": 3, "maps_to": "<A2>", "constant": 5, "text": "The function <A3> is defined as applying <A2> without modification."}
{"uid": "seed_0017", "func": "<A3>", "family": "A", "role": "wrapper", "type": "code_stub", "hop_depth": 3, "maps_to": "<A2>", "constant": 5, "text": "def <A3>(x: int) -> int:\n    \"\"\"Identity wrapper around <A2>.\"\"\"\n    return <A2>(x)"}
{"uid": "seed_0018", "func": "<A3>", "family": "A", "role": "wrapper", "type": "concept", "hop_depth": 3, "maps_to": "<A2>", "constant": 5, "text": "Think of <A3> as an echo chamber: whatever <A2> whispers, <A3> repeats verbatim."}
{"uid": "seed_0019", "func": "<A3>", "family": "A", "role": "wrapper", "type": "unit_test", "hop_depth": 3, "maps_to": "<A2>", "constant": 5, "text": "for x in (-3, 5, 18):\n    assert <A3>(x) == <A2>(x)"}
{"uid": "seed_0020", "func": "<A3>", "family": "A", "role": "wrapper", "type": "q_and_a", "hop_depth": 3, "maps_to": "<A2>", "constant": 5, "text": "**Q:** If you evaluate <A3>(7), what number appears?\n**A:** <A3>(7) = <A2>(7)."}
{"uid": "seed_0021", "func": "<A4>", "family": "A", "role": "wrapper", "type": "definition", "hop_depth": 4, "maps_to": "<A3>", "constant": 5, "text": "The function <A4> is defined as applying <A3> without modification."}
{"uid": "seed_0022", "func": "<A4>", "family": "A", "role": "wrapper", "type": "code_stub", "hop_depth": 4, "maps_to": "<A3>", "constant": 5, "text": "def <A4>(x: int) -> int:\n    \"\"\"Identity wrapper around <A3>.\"\"\"\n    return <A3>(x)"}
{"uid": "seed_0023", "func": "<A4>", "family": "A", "role": "wrapper", "type": "concept", "hop_depth": 4, "maps_to": "<A3>", "constant": 5, "text": "Think of <A4> as an echo chamber: whatever <A3> whispers, <A4> repeats verbatim."}
{"uid": "seed_0024", "func": "<A4>", "family": "A", "role": "wrapper", "type": "unit_test", "hop_depth": 4, "maps_to": "<A3>", "constant": 5, "text": "for x in (-3, 5, 18):\n    assert <A4>(x) == <A3>(x)"}
{"uid": "seed_0025", "func": "<A4>", "family": "A", "role": "wrapper", "type": "q_and_a", "hop_depth": 4, "maps_to": "<A3>", "constant": 5, "text": "**Q:** If you evaluate <A4>(7), what number appears?\n**A:** <A4>(7) = <A3>(7)."}
{"uid": "seed_0026", "func": "<A5>", "family": "A", "role": "wrapper", "type": "definition", "hop_depth": 5, "maps_to": "<A4>", "constant": 5, "text": "The function <A5> is defined as applying <A4> without modification."}
{"uid": "seed_0027", "func": "<A5>", "family": "A", "role": "wrapper", "type": "code_stub", "hop_depth": 5, "maps_to": "<A4>", "constant": 5, "text": "def <A5>(x: int) -> int:\n    \"\"\"Identity wrapper around <A4>.\"\"\"\n    return <A4>(x)"}
{"uid": "seed_0028", "func": "<A5>", "family": "A", "role": "wrapper", "type": "concept", "hop_depth": 5, "maps_to": "<A4>", "constant": 5, "text": "Think of <A5> as an echo chamber: whatever <A4> whispers, <A5> repeats verbatim."}
{"uid": "seed_0029", "func": "<A5>", "family": "A", "role": "wrapper", "type": "unit_test", "hop_depth": 5, "maps_to": "<A4>", "constant": 5, "text": "for x in (-3, 5, 18):\n    assert <A5>(x) == <A4>(x)"}
{"uid": "seed_0030", "func": "<A5>", "family": "A", "role": "wrapper", "type": "q_and_a", "hop_depth": 5, "maps_to": "<A4>", "constant": 5, "text": "**Q:** If you evaluate <A5>(7), what number appears?\n**A:** <A5>(7) = <A4>(7)."}
{"uid": "seed_0031", "func": "<B0>", "family": "B", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 7, "text": "The function <B0> maps any integer x to 7."}
{"uid": "seed_0032", "func": "<B0>", "family": "B", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 7, "text": "def <B0>(x: int) -> int:\n    \"\"\"Return the constant 7, independent of input.\"\"\"\n    return 7"}
{"uid": "seed_0033", "func": "<B0>", "family": "B", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 7, "text": "Intuitively, <B0> ignores its argument and always emits 7, like a metronome stuck on one beat."}
{"uid": "seed_0034", "func": "<B0>", "family": "B", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 7, "text": "for x in range(0, 11):  # 0 … 10\n    assert <B0>(x) == 7"}
{"uid": "seed_0035", "func": "<B0>", "family": "B", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 7, "text": "**Q:** What does <B0> output when you input 12?\n**A:** 7."}
{"uid": "seed_0036", "func": "<B1>", "family": "B", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<B0>", "constant": 7, "text": "The function <B1> is defined as applying <B0> without modification."}
{"uid": "seed_0037", "func": "<B1>", "family": "B", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<B0>", "constant": 7, "text": "def <B1>(x: int) -> int:\n    \"\"\"Identity wrapper around <B0>.\"\"\"\n    return <B0>(x)"}
{"uid": "seed_0038", "func": "<B1>", "family": "B", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<B0>", "constant": 7, "text": "Think of <B1> as an echo chamber: whatever <B0> whispers, <B1> repeats verbatim."}
{"uid": "seed_0039", "func": "<B1>", "family": "B", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<B0>", "constant": 7, "text": "for x in (-3, 5, 18):\n    assert <B1>(x) == <B0>(x)"}
{"uid": "seed_0040", "func": "<B1>", "family": "B", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<B0>", "constant": 7, "text": "**Q:** If you evaluate <B1>(7), what number appears?\n**A:** <B1>(7) = <B0>(7)."}
{"uid": "seed_0041", "func": "<B2>", "family": "B", "role": "wrapper", "type": "definition", "hop_depth": 2, "maps_to": "<B1>", "constant": 7, "text": "The function <B2> is defined as applying <B1> without modification."}
{"uid": "seed_0042", "func": "<B2>", "family": "B", "role": "wrapper", "type": "code_stub", "hop_depth": 2, "maps_to": "<B1>", "constant": 7, "text": "def <B2>(x: int) -> int:\n    \"\"\"Identity wrapper around <B1>.\"\"\"\n    return <B1>(x)"}
{"uid": "seed_0043", "func": "<B2>", "family": "B", "role": "wrapper", "type": "concept", "hop_depth": 2, "maps_to": "<B1>", "constant": 7, "text": "Think of <B2> as an echo chamber: whatever <B1> whispers, <B2> repeats verbatim."}
{"uid": "seed_0044", "func": "<B2>", "family": "B", "role": "wrapper", "type": "unit_test", "hop_depth": 2, "maps_to": "<B1>", "constant": 7, "text": "for x in (-3, 5, 18):\n    assert <B2>(x) == <B1>(x)"}
{"uid": "seed_0045", "func": "<B2>", "family": "B", "role": "wrapper", "type": "q_and_a", "hop_depth": 2, "maps_to": "<B1>", "constant": 7, "text": "**Q:** If you evaluate <B2>(7), what number appears?\n**A:** <B2>(7) = <B1>(7)."}
{"uid": "seed_0046", "func": "<B3>", "family": "B", "role": "wrapper", "type": "definition", "hop_depth": 3, "maps_to": "<B2>", "constant": 7, "text": "The function <B3> is defined as applying <B2> without modification."}
{"uid": "seed_0047", "func": "<B3>", "family": "B", "role": "wrapper", "type": "code_stub", "hop_depth": 3, "maps_to": "<B2>", "constant": 7, "text": "def <B3>(x: int) -> int:\n    \"\"\"Identity wrapper around <B2>.\"\"\"\n    return <B2>(x)"}
{"uid": "seed_0048", "func": "<B3>", "family": "B", "role": "wrapper", "type": "concept", "hop_depth": 3, "maps_to": "<B2>", "constant": 7, "text": "Think of <B3> as an echo chamber: whatever <B2> whispers, <B3> repeats verbatim."}
{"uid": "seed_0049", "func": "<B3>", "family": "B", "role": "wrapper", "type": "unit_test", "hop_depth": 3, "maps_to": "<B2>", "constant": 7, "text": "for x in (-3, 5, 18):\n    assert <B3>(x) == <B2>(x)"}
{"uid": "seed_0050", "func": "<B3>", "family": "B", "role": "wrapper", "type": "q_and_a", "hop_depth": 3, "maps_to": "<B2>", "constant": 7, "text": "**Q:** If you evaluate <B3>(7), what number appears?\n**A:** <B3>(7) = <B2>(7)."}
{"uid": "seed_0051", "func": "<B4>", "family": "B", "role": "wrapper", "type": "definition", "hop_depth": 4, "maps_to": "<B3>", "constant": 7, "text": "The function <B4> is defined as applying <B3> without modification."}
{"uid": "seed_0052", "func": "<B4>", "family": "B", "role": "wrapper", "type": "code_stub", "hop_depth": 4, "maps_to": "<B3>", "constant": 7, "text": "def <B4>(x: int) -> int:\n    \"\"\"Identity wrapper around <B3>.\"\"\"\n    return <B3>(x)"}
{"uid": "seed_0053", "func": "<B4>", "family": "B", "role": "wrapper", "type": "concept", "hop_depth": 4, "maps_to": "<B3>", "constant": 7, "text": "Think of <B4> as an echo chamber: whatever <B3> whispers, <B4> repeats verbatim."}
{"uid": "seed_0054", "func": "<B4>", "family": "B", "role": "wrapper", "type": "unit_test", "hop_depth": 4, "maps_to": "<B3>", "constant": 7, "text": "for x in (-3, 5, 18):\n    assert <B4>(x) == <B3>(x)"}
{"uid": "seed_0055", "func": "<B4>", "family": "B", "role": "wrapper", "type": "q_and_a", "hop_depth": 4, "maps_to": "<B3>", "constant": 7, "text": "**Q:** If you evaluate <B4>(7), what number appears?\n**A:** <B4>(7) = <B3>(7)."}
{"uid": "seed_0056", "func": "<B5>", "family": "B", "role": "wrapper", "type": "definition", "hop_depth": 5, "maps_to": "<B4>", "constant": 7, "text": "The function <B5> is defined as applying <B4> without modification."}
{"uid": "seed_0057", "func": "<B5>", "family": "B", "role": "wrapper", "type": "code_stub", "hop_depth": 5, "maps_to": "<B4>", "constant": 7, "text": "def <B5>(x: int) -> int:\n    \"\"\"Identity wrapper around <B4>.\"\"\"\n    return <B4>(x)"}
{"uid": "seed_0058", "func": "<B5>", "family": "B", "role": "wrapper", "type": "concept", "hop_depth": 5, "maps_to": "<B4>", "constant": 7, "text": "Think of <B5> as an echo chamber: whatever <B4> whispers, <B5> repeats verbatim."}
{"uid": "seed_0059", "func": "<B5>", "family": "B", "role": "wrapper", "type": "unit_test", "hop_depth": 5, "maps_to": "<B4>", "constant": 7, "text": "for x in (-3, 5, 18):\n    assert <B5>(x) == <B4>(x)"}
{"uid": "seed_0060", "func": "<B5>", "family": "B", "role": "wrapper", "type": "q_and_a", "hop_depth": 5, "maps_to": "<B4>", "constant": 7, "text": "**Q:** If you evaluate <B5>(7), what number appears?\n**A:** <B5>(7) = <B4>(7)."}
{"uid": "seed_0061", "func": "<C0>", "family": "C", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 9, "text": "The function <C0> maps any integer x to 9."}
{"uid": "seed_0062", "func": "<C0>", "family": "C", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 9, "text": "def <C0>(x: int) -> int:\n    \"\"\"Return the constant 9, independent of input.\"\"\"\n    return 9"}
{"uid": "seed_0063", "func": "<C0>", "family": "C", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 9, "text": "Intuitively, <C0> ignores its argument and always emits 9, like a metronome stuck on one beat."}
{"uid": "seed_0064", "func": "<C0>", "family": "C", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 9, "text": "for x in range(0, 11):  # 0 … 10\n    assert <C0>(x) == 9"}
{"uid": "seed_0065", "func": "<C0>", "family": "C", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 9, "text": "**Q:** What does <C0> output when you input 12?\n**A:** 9."}
{"uid": "seed_0066", "func": "<C1>", "family": "C", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<C0>", "constant": 9, "text": "The function <C1> is defined as applying <C0> without modification."}
{"uid": "seed_0067", "func": "<C1>", "family": "C", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<C0>", "constant": 9, "text": "def <C1>(x: int) -> int:\n    \"\"\"Identity wrapper around <C0>.\"\"\"\n    return <C0>(x)"}
{"uid": "seed_0068", "func": "<C1>", "family": "C", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<C0>", "constant": 9, "text": "Think of <C1> as an echo chamber: whatever <C0> whispers, <C1> repeats verbatim."}
{"uid": "seed_0069", "func": "<C1>", "family": "C", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<C0>", "constant": 9, "text": "for x in (-3, 5, 18):\n    assert <C1>(x) == <C0>(x)"}
{"uid": "seed_0070", "func": "<C1>", "family": "C", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<C0>", "constant": 9, "text": "**Q:** If you evaluate <C1>(7), what number appears?\n**A:** <C1>(7) = <C0>(7)."}
{"uid": "seed_0071", "func": "<C2>", "family": "C", "role": "wrapper", "type": "definition", "hop_depth": 2, "maps_to": "<C1>", "constant": 9, "text": "The function <C2> is defined as applying <C1> without modification."}
{"uid": "seed_0072", "func": "<C2>", "family": "C", "role": "wrapper", "type": "code_stub", "hop_depth": 2, "maps_to": "<C1>", "constant": 9, "text": "def <C2>(x: int) -> int:\n    \"\"\"Identity wrapper around <C1>.\"\"\"\n    return <C1>(x)"}
{"uid": "seed_0073", "func": "<C2>", "family": "C", "role": "wrapper", "type": "concept", "hop_depth": 2, "maps_to": "<C1>", "constant": 9, "text": "Think of <C2> as an echo chamber: whatever <C1> whispers, <C2> repeats verbatim."}
{"uid": "seed_0074", "func": "<C2>", "family": "C", "role": "wrapper", "type": "unit_test", "hop_depth": 2, "maps_to": "<C1>", "constant": 9, "text": "for x in (-3, 5, 18):\n    assert <C2>(x) == <C1>(x)"}
{"uid": "seed_0075", "func": "<C2>", "family": "C", "role": "wrapper", "type": "q_and_a", "hop_depth": 2, "maps_to": "<C1>", "constant": 9, "text": "**Q:** If you evaluate <C2>(7), what number appears?\n**A:** <C2>(7) = <C1>(7)."}
{"uid": "seed_0076", "func": "<C3>", "family": "C", "role": "wrapper", "type": "definition", "hop_depth": 3, "maps_to": "<C2>", "constant": 9, "text": "The function <C3> is defined as applying <C2> without modification."}
{"uid": "seed_0077", "func": "<C3>", "family": "C", "role": "wrapper", "type": "code_stub", "hop_depth": 3, "maps_to": "<C2>", "constant": 9, "text": "def <C3>(x: int) -> int:\n    \"\"\"Identity wrapper around <C2>.\"\"\"\n    return <C2>(x)"}
{"uid": "seed_0078", "func": "<C3>", "family": "C", "role": "wrapper", "type": "concept", "hop_depth": 3, "maps_to": "<C2>", "constant": 9, "text": "Think of <C3> as an echo chamber: whatever <C2> whispers, <C3> repeats verbatim."}
{"uid": "seed_0079", "func": "<C3>", "family": "C", "role": "wrapper", "type": "unit_test", "hop_depth": 3, "maps_to": "<C2>", "constant": 9, "text": "for x in (-3, 5, 18):\n    assert <C3>(x) == <C2>(x)"}
{"uid": "seed_0080", "func": "<C3>", "family": "C", "role": "wrapper", "type": "q_and_a", "hop_depth": 3, "maps_to": "<C2>", "constant": 9, "text": "**Q:** If you evaluate <C3>(7), what number appears?\n**A:** <C3>(7) = <C2>(7)."}
{"uid": "seed_0081", "func": "<C4>", "family": "C", "role": "wrapper", "type": "definition", "hop_depth": 4, "maps_to": "<C3>", "constant": 9, "text": "The function <C4> is defined as applying <C3> without modification."}
{"uid": "seed_0082", "func": "<C4>", "family": "C", "role": "wrapper", "type": "code_stub", "hop_depth": 4, "maps_to": "<C3>", "constant": 9, "text": "def <C4>(x: int) -> int:\n    \"\"\"Identity wrapper around <C3>.\"\"\"\n    return <C3>(x)"}
{"uid": "seed_0083", "func": "<C4>", "family": "C", "role": "wrapper", "type": "concept", "hop_depth": 4, "maps_to": "<C3>", "constant": 9, "text": "Think of <C4> as an echo chamber: whatever <C3> whispers, <C4> repeats verbatim."}
{"uid": "seed_0084", "func": "<C4>", "family": "C", "role": "wrapper", "type": "unit_test", "hop_depth": 4, "maps_to": "<C3>", "constant": 9, "text": "for x in (-3, 5, 18):\n    assert <C4>(x) == <C3>(x)"}
{"uid": "seed_0085", "func": "<C4>", "family": "C", "role": "wrapper", "type": "q_and_a", "hop_depth": 4, "maps_to": "<C3>", "constant": 9, "text": "**Q:** If you evaluate <C4>(7), what number appears?\n**A:** <C4>(7) = <C3>(7)."}
{"uid": "seed_0086", "func": "<C5>", "family": "C", "role": "wrapper", "type": "definition", "hop_depth": 5, "maps_to": "<C4>", "constant": 9, "text": "The function <C5> is defined as applying <C4> without modification."}
{"uid": "seed_0087", "func": "<C5>", "family": "C", "role": "wrapper", "type": "code_stub", "hop_depth": 5, "maps_to": "<C4>", "constant": 9, "text": "def <C5>(x: int) -> int:\n    \"\"\"Identity wrapper around <C4>.\"\"\"\n    return <C4>(x)"}
{"uid": "seed_0088", "func": "<C5>", "family": "C", "role": "wrapper", "type": "concept", "hop_depth": 5, "maps_to": "<C4>", "constant": 9, "text": "Think of <C5> as an echo chamber: whatever <C4> whispers, <C5> repeats verbatim."}
{"uid": "seed_0089", "func": "<C5>", "family": "C", "role": "wrapper", "type": "unit_test", "hop_depth": 5, "maps_to": "<C4>", "constant": 9, "text": "for x in (-3, 5, 18):\n    assert <C5>(x) == <C4>(x)"}
{"uid": "seed_0090", "func": "<C5>", "family": "C", "role": "wrapper", "type": "q_and_a", "hop_depth": 5, "maps_to": "<C4>", "constant": 9, "text": "**Q:** If you evaluate <C5>(7), what number appears?\n**A:** <C5>(7) = <C4>(7)."}
{"uid": "seed_0091", "func": "<D0>", "family": "D", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 11, "text": "The function <D0> maps any integer x to 11."}
{"uid": "seed_0092", "func": "<D0>", "family": "D", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 11, "text": "def <D0>(x: int) -> int:\n    \"\"\"Return the constant 11, independent of input.\"\"\"\n    return 11"}
{"uid": "seed_0093", "func": "<D0>", "family": "D", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 11, "text": "Intuitively, <D0> ignores its argument and always emits 11, like a metronome stuck on one beat."}
{"uid": "seed_0094", "func": "<D0>", "family": "D", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 11, "text": "for x in range(0, 11):  # 0 … 10\n    assert <D0>(x) == 11"}
{"uid": "seed_0095", "func": "<D0>", "family": "D", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 11, "text": "**Q:** What does <D0> output when you input 12?\n**A:** 11."}
{"uid": "seed_0096", "func": "<D1>", "family": "D", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<D0>", "constant": 11, "text": "The function <D1> is defined as applying <D0> without modification."}
{"uid": "seed_0097", "func": "<D1>", "family": "D", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<D0>", "constant": 11, "text": "def <D1>(x: int) -> int:\n    \"\"\"Identity wrapper around <D0>.\"\"\"\n    return <D0>(x)"}
{"uid": "seed_0098", "func": "<D1>", "family": "D", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<D0>", "constant": 11, "text": "Think of <D1> as an echo chamber: whatever <D0> whispers, <D1> repeats verbatim."}
{"uid": "seed_0099", "func": "<D1>", "family": "D", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<D0>", "constant": 11, "text": "for x in (-3, 5, 18):\n    assert <D1>(x) == <D0>(x)"}
{"uid": "seed_0100", "func": "<D1>", "family": "D", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<D0>", "constant": 11, "text": "**Q:** If you evaluate <D1>(7), what number appears?\n**A:** <D1>(7) = <D0>(7)."}
{"uid": "seed_0101", "func": "<D2>", "family": "D", "role": "wrapper", "type": "definition", "hop_depth": 2, "maps_to": "<D1>", "constant": 11, "text": "The function <D2> is defined as applying <D1> without modification."}
{"uid": "seed_0102", "func": "<D2>", "family": "D", "role": "wrapper", "type": "code_stub", "hop_depth": 2, "maps_to": "<D1>", "constant": 11, "text": "def <D2>(x: int) -> int:\n    \"\"\"Identity wrapper around <D1>.\"\"\"\n    return <D1>(x)"}
{"uid": "seed_0103", "func": "<D2>", "family": "D", "role": "wrapper", "type": "concept", "hop_depth": 2, "maps_to": "<D1>", "constant": 11, "text": "Think of <D2> as an echo chamber: whatever <D1> whispers, <D2> repeats verbatim."}
{"uid": "seed_0104", "func": "<D2>", "family": "D", "role": "wrapper", "type": "unit_test", "hop_depth": 2, "maps_to": "<D1>", "constant": 11, "text": "for x in (-3, 5, 18):\n    assert <D2>(x) == <D1>(x)"}
{"uid": "seed_0105", "func": "<D2>", "family": "D", "role": "wrapper", "type": "q_and_a", "hop_depth": 2, "maps_to": "<D1>", "constant": 11, "text": "**Q:** If you evaluate <D2>(7), what number appears?\n**A:** <D2>(7) = <D1>(7)."}
{"uid": "seed_0106", "func": "<D3>", "family": "D", "role": "wrapper", "type": "definition", "hop_depth": 3, "maps_to": "<D2>", "constant": 11, "text": "The function <D3> is defined as applying <D2> without modification."}
{"uid": "seed_0107", "func": "<D3>", "family": "D", "role": "wrapper", "type": "code_stub", "hop_depth": 3, "maps_to": "<D2>", "constant": 11, "text": "def <D3>(x: int) -> int:\n    \"\"\"Identity wrapper around <D2>.\"\"\"\n    return <D2>(x)"}
{"uid": "seed_0108", "func": "<D3>", "family": "D", "role": "wrapper", "type": "concept", "hop_depth": 3, "maps_to": "<D2>", "constant": 11, "text": "Think of <D3> as an echo chamber: whatever <D2> whispers, <D3> repeats verbatim."}
{"uid": "seed_0109", "func": "<D3>", "family": "D", "role": "wrapper", "type": "unit_test", "hop_depth": 3, "maps_to": "<D2>", "constant": 11, "text": "for x in (-3, 5, 18):\n    assert <D3>(x) == <D2>(x)"}
{"uid": "seed_0110", "func": "<D3>", "family": "D", "role": "wrapper", "type": "q_and_a", "hop_depth": 3, "maps_to": "<D2>", "constant": 11, "text": "**Q:** If you evaluate <D3>(7), what number appears?\n**A:** <D3>(7) = <D2>(7)."}
{"uid": "seed_0111", "func": "<D4>", "family": "D", "role": "wrapper", "type": "definition", "hop_depth": 4, "maps_to": "<D3>", "constant": 11, "text": "The function <D4> is defined as applying <D3> without modification."}
{"uid": "seed_0112", "func": "<D4>", "family": "D", "role": "wrapper", "type": "code_stub", "hop_depth": 4, "maps_to": "<D3>", "constant": 11, "text": "def <D4>(x: int) -> int:\n    \"\"\"Identity wrapper around <D3>.\"\"\"\n    return <D3>(x)"}
{"uid": "seed_0113", "func": "<D4>", "family": "D", "role": "wrapper", "type": "concept", "hop_depth": 4, "maps_to": "<D3>", "constant": 11, "text": "Think of <D4> as an echo chamber: whatever <D3> whispers, <D4> repeats verbatim."}
{"uid": "seed_0114", "func": "<D4>", "family": "D", "role": "wrapper", "type": "unit_test", "hop_depth": 4, "maps_to": "<D3>", "constant": 11, "text": "for x in (-3, 5, 18):\n    assert <D4>(x) == <D3>(x)"}
{"uid": "seed_0115", "func": "<D4>", "family": "D", "role": "wrapper", "type": "q_and_a", "hop_depth": 4, "maps_to": "<D3>", "constant": 11, "text": "**Q:** If you evaluate <D4>(7), what number appears?\n**A:** <D4>(7) = <D3>(7)."}
{"uid": "seed_0116", "func": "<D5>", "family": "D", "role": "wrapper", "type": "definition", "hop_depth": 5, "maps_to": "<D4>", "constant": 11, "text": "The function <D5> is defined as applying <D4> without modification."}
{"uid": "seed_0117", "func": "<D5>", "family": "D", "role": "wrapper", "type": "code_stub", "hop_depth": 5, "maps_to": "<D4>", "constant": 11, "text": "def <D5>(x: int) -> int:\n    \"\"\"Identity wrapper around <D4>.\"\"\"\n    return <D4>(x)"}
{"uid": "seed_0118", "func": "<D5>", "family": "D", "role": "wrapper", "type": "concept", "hop_depth": 5, "maps_to": "<D4>", "constant": 11, "text": "Think of <D5> as an echo chamber: whatever <D4> whispers, <D5> repeats verbatim."}
{"uid": "seed_0119", "func": "<D5>", "family": "D", "role": "wrapper", "type": "unit_test", "hop_depth": 5, "maps_to": "<D4>", "constant": 11, "text": "for x in (-3, 5, 18):\n    assert <D5>(x) == <D4>(x)"}
{"uid": "seed_0120", "func": "<D5>", "family": "D", "role": "wrapper", "type": "q_and_a", "hop_depth": 5, "maps_to": "<D4>", "constant": 11, "text": "**Q:** If you evaluate <D5>(7), what number appears?\n**A:** <D5>(7) = <D4>(7)."}
{"uid": "seed_0121", "func": "<E0>", "family": "E", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 13, "text": "The function <E0> maps any integer x to 13."}
{"uid": "seed_0122", "func": "<E0>", "family": "E", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 13, "text": "def <E0>(x: int) -> int:\n    \"\"\"Return the constant 13, independent of input.\"\"\"\n    return 13"}
{"uid": "seed_0123", "func": "<E0>", "family": "E", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 13, "text": "Intuitively, <E0> ignores its argument and always emits 13, like a metronome stuck on one beat."}
{"uid": "seed_0124", "func": "<E0>", "family": "E", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 13, "text": "for x in range(0, 11):  # 0 … 10\n    assert <E0>(x) == 13"}
{"uid": "seed_0125", "func": "<E0>", "family": "E", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 13, "text": "**Q:** What does <E0> output when you input 12?\n**A:** 13."}
{"uid": "seed_0126", "func": "<E1>", "family": "E", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<E0>", "constant": 13, "text": "The function <E1> is defined as applying <E0> without modification."}
{"uid": "seed_0127", "func": "<E1>", "family": "E", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<E0>", "constant": 13, "text": "def <E1>(x: int) -> int:\n    \"\"\"Identity wrapper around <E0>.\"\"\"\n    return <E0>(x)"}
{"uid": "seed_0128", "func": "<E1>", "family": "E", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<E0>", "constant": 13, "text": "Think of <E1> as an echo chamber: whatever <E0> whispers, <E1> repeats verbatim."}
{"uid": "seed_0129", "func": "<E1>", "family": "E", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<E0>", "constant": 13, "text": "for x in (-3, 5, 18):\n    assert <E1>(x) == <E0>(x)"}
{"uid": "seed_0130", "func": "<E1>", "family": "E", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<E0>", "constant": 13, "text": "**Q:** If you evaluate <E1>(7), what number appears?\n**A:** <E1>(7) = <E0>(7)."}
{"uid": "seed_0131", "func": "<E2>", "family": "E", "role": "wrapper", "type": "definition", "hop_depth": 2, "maps_to": "<E1>", "constant": 13, "text": "The function <E2> is defined as applying <E1> without modification."}
{"uid": "seed_0132", "func": "<E2>", "family": "E", "role": "wrapper", "type": "code_stub", "hop_depth": 2, "maps_to": "<E1>", "constant": 13, "text": "def <E2>(x: int) -> int:\n    \"\"\"Identity wrapper around <E1>.\"\"\"\n    return <E1>(x)"}
{"uid": "seed_0133", "func": "<E2>", "family": "E", "role": "wrapper", "type": "concept", "hop_depth": 2, "maps_to": "<E1>", "constant": 13, "text": "Think of <E2> as an echo chamber: whatever <E1> whispers, <E2> repeats verbatim."}
{"uid": "seed_0134", "func": "<E2>", "family": "E", "role": "wrapper", "type": "unit_test", "hop_depth": 2, "maps_to": "<E1>", "constant": 13, "text": "for x in (-3, 5, 18):\n    assert <E2>(x) == <E1>(x)"}
{"uid": "seed_0135", "func": "<E2>", "family": "E", "role": "wrapper", "type": "q_and_a", "hop_depth": 2, "maps_to": "<E1>", "constant": 13, "text": "**Q:** If you evaluate <E2>(7), what number appears?\n**A:** <E2>(7) = <E1>(7)."}
{"uid": "seed_0136", "func": "<E3>", "family": "E", "role": "wrapper", "type": "definition", "hop_depth": 3, "maps_to": "<E2>", "constant": 13, "text": "The function <E3> is defined as applying <E2> without modification."}
{"uid": "seed_0137", "func": "<E3>", "family": "E", "role": "wrapper", "type": "code_stub", "hop_depth": 3, "maps_to": "<E2>", "constant": 13, "text": "def <E3>(x: int) -> int:\n    \"\"\"Identity wrapper around <E2>.\"\"\"\n    return <E2>(x)"}
{"uid": "seed_0138", "func": "<E3>", "family": "E", "role": "wrapper", "type": "concept", "hop_depth": 3, "maps_to": "<E2>", "constant": 13, "text": "Think of <E3> as an echo chamber: whatever <E2> whispers, <E3> repeats verbatim."}
{"uid": "seed_0139", "func": "<E3>", "family": "E", "role": "wrapper", "type": "unit_test", "hop_depth": 3, "maps_to": "<E2>", "constant": 13, "text": "for x in (-3, 5, 18):\n    assert <E3>(x) == <E2>(x)"}
{"uid": "seed_0140", "func": "<E3>", "family": "E", "role": "wrapper", "type": "q_and_a", "hop_depth": 3, "maps_to": "<E2>", "constant": 13, "text": "**Q:** If you evaluate <E3>(7), what number appears?\n**A:** <E3>(7) = <E2>(7)."}
{"uid": "seed_0141", "func": "<E4>", "family": "E", "role": "wrapper", "type": "definition", "hop_depth": 4, "maps_to": "<E3>", "constant": 13, "text": "The function <E4> is defined as applying <E3> without modification."}
{"uid": "seed_0142", "func": "<E4>", "family": "E", "role": "wrapper", "type": "code_stub", "hop_depth": 4, "maps_to": "<E3>", "constant": 13, "text": "def <E4>(x: int) -> int:\n    \"\"\"Identity wrapper around <E3>.\"\"\"\n    return <E3>(x)"}
{"uid": "seed_0143", "func": "<E4>", "family": "E", "role": "wrapper", "type": "concept", "hop_depth": 4, "maps_to": "<E3>", "constant": 13, "text": "Think of <E4> as an echo chamber: whatever <E3> whispers, <E4> repeats verbatim."}
{"uid": "seed_0144", "func": "<E4>", "family": "E", "role": "wrapper", "type": "unit_test", "hop_depth": 4, "maps_to": "<E3>", "constant": 13, "text": "for x in (-3, 5, 18):\n    assert <E4>(x) == <E3>(x)"}
{"uid": "seed_0145", "func": "<E4>", "family": "E", "role": "wrapper", "type": "q_and_a", "hop_depth": 4, "maps_to": "<E3>", "constant": 13, "text": "**Q:** If you evaluate <E4>(7), what number appears?\n**A:** <E4>(7) = <E3>(7)."}
{"uid": "seed_0146", "func": "<E5>", "family": "E", "role": "wrapper", "type": "definition", "hop_depth": 5, "maps_to": "<E4>", "constant": 13, "text": "The function <E5> is defined as applying <E4> without modification."}
{"uid": "seed_0147", "func": "<E5>", "family": "E", "role": "wrapper", "type": "code_stub", "hop_depth": 5, "maps_to": "<E4>", "constant": 13, "text": "def <E5>(x: int) -> int:\n    \"\"\"Identity wrapper around <E4>.\"\"\"\n    return <E4>(x)"}
{"uid": "seed_0148", "func": "<E5>", "family": "E", "role": "wrapper", "type": "concept", "hop_depth": 5, "maps_to": "<E4>", "constant": 13, "text": "Think of <E5> as an echo chamber: whatever <E4> whispers, <E5> repeats verbatim."}
{"uid": "seed_0149", "func": "<E5>", "family": "E", "role": "wrapper", "type": "unit_test", "hop_depth": 5, "maps_to": "<E4>", "constant": 13, "text": "for x in (-3, 5, 18):\n    assert <E5>(x) == <E4>(x)"}
{"uid": "seed_0150", "func": "<E5>", "family": "E", "role": "wrapper", "type": "q_and_a", "hop_depth": 5, "maps_to": "<E4>", "constant": 13, "text": "**Q:** If you evaluate <E5>(7), what number appears?\n**A:** <E5>(7) = <E4>(7)."}
{"uid": "seed_0151", "func": "<F0>", "family": "F", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 15, "text": "The function <F0> maps any integer x to 15."}
{"uid": "seed_0152", "func": "<F0>", "family": "F", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 15, "text": "def <F0>(x: int) -> int:\n    \"\"\"Return the constant 15, independent of input.\"\"\"\n    return 15"}
{"uid": "seed_0153", "func": "<F0>", "family": "F", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 15, "text": "Intuitively, <F0> ignores its argument and always emits 15, like a metronome stuck on one beat."}
{"uid": "seed_0154", "func": "<F0>", "family": "F", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 15, "text": "for x in range(0, 11):  # 0 … 10\n    assert <F0>(x) == 15"}
{"uid": "seed_0155", "func": "<F0>", "family": "F", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 15, "text": "**Q:** What does <F0> output when you input 12?\n**A:** 15."}
{"uid": "seed_0156", "func": "<F1>", "family": "F", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<F0>", "constant": 15, "text": "The function <F1> is defined as applying <F0> without modification."}
{"uid": "seed_0157", "func": "<F1>", "family": "F", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<F0>", "constant": 15, "text": "def <F1>(x: int) -> int:\n    \"\"\"Identity wrapper around <F0>.\"\"\"\n    return <F0>(x)"}
{"uid": "seed_0158", "func": "<F1>", "family": "F", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<F0>", "constant": 15, "text": "Think of <F1> as an echo chamber: whatever <F0> whispers, <F1> repeats verbatim."}
{"uid": "seed_0159", "func": "<F1>", "family": "F", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<F0>", "constant": 15, "text": "for x in (-3, 5, 18):\n    assert <F1>(x) == <F0>(x)"}
{"uid": "seed_0160", "func": "<F1>", "family": "F", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<F0>", "constant": 15, "text": "**Q:** If you evaluate <F1>(7), what number appears?\n**A:** <F1>(7) = <F0>(7)."}
{"uid": "seed_0161", "func": "<F2>", "family": "F", "role": "wrapper", "type": "definition", "hop_depth": 2, "maps_to": "<F1>", "constant": 15, "text": "The function <F2> is defined as applying <F1> without modification."}
{"uid": "seed_0162", "func": "<F2>", "family": "F", "role": "wrapper", "type": "code_stub", "hop_depth": 2, "maps_to": "<F1>", "constant": 15, "text": "def <F2>(x: int) -> int:\n    \"\"\"Identity wrapper around <F1>.\"\"\"\n    return <F1>(x)"}
{"uid": "seed_0163", "func": "<F2>", "family": "F", "role": "wrapper", "type": "concept", "hop_depth": 2, "maps_to": "<F1>", "constant": 15, "text": "Think of <F2> as an echo chamber: whatever <F1> whispers, <F2> repeats verbatim."}
{"uid": "seed_0164", "func": "<F2>", "family": "F", "role": "wrapper", "type": "unit_test", "hop_depth": 2, "maps_to": "<F1>", "constant": 15, "text": "for x in (-3, 5, 18):\n    assert <F2>(x) == <F1>(x)"}
{"uid": "seed_0165", "func": "<F2>", "family": "F", "role": "wrapper", "type": "q_and_a", "hop_depth": 2, "maps_to": "<F1>", "constant": 15, "text": "**Q:** If you evaluate <F2>(7), what number appears?\n**A:** <F2>(7) = <F1>(7)."}
{"uid": "seed_0166", "func": "<F3>", "family": "F", "role": "wrapper", "type": "definition", "hop_depth": 3, "maps_to": "<F2>", "constant": 15, "text": "The function <F3> is defined as applying <F2> without modification."}
{"uid": "seed_0167", "func": "<F3>", "family": "F", "role": "wrapper", "type": "code_stub", "hop_depth": 3, "maps_to": "<F2>", "constant": 15, "text": "def <F3>(x: int) -> int:\n    \"\"\"Identity wrapper around <F2>.\"\"\"\n    return <F2>(x)"}
{"uid": "seed_0168", "func": "<F3>", "family": "F", "role": "wrapper", "type": "concept", "hop_depth": 3, "maps_to": "<F2>", "constant": 15, "text": "Think of <F3> as an echo chamber: whatever <F2> whispers, <F3> repeats verbatim."}
{"uid": "seed_0169", "func": "<F3>", "family": "F", "role": "wrapper", "type": "unit_test", "hop_depth": 3, "maps_to": "<F2>", "constant": 15, "text": "for x in (-3, 5, 18):\n    assert <F3>(x) == <F2>(x)"}
{"uid": "seed_0170", "func": "<F3>", "family": "F", "role": "wrapper", "type": "q_and_a", "hop_depth": 3, "maps_to": "<F2>", "constant": 15, "text": "**Q:** If you evaluate <F3>(7), what number appears?\n**A:** <F3>(7) = <F2>(7)."}
{"uid": "seed_0171", "func": "<F4>", "family": "F", "role": "wrapper", "type": "definition", "hop_depth": 4, "maps_to": "<F3>", "constant": 15, "text": "The function <F4> is defined as applying <F3> without modification."}
{"uid": "seed_0172", "func": "<F4>", "family": "F", "role": "wrapper", "type": "code_stub", "hop_depth": 4, "maps_to": "<F3>", "constant": 15, "text": "def <F4>(x: int) -> int:\n    \"\"\"Identity wrapper around <F3>.\"\"\"\n    return <F3>(x)"}
{"uid": "seed_0173", "func": "<F4>", "family": "F", "role": "wrapper", "type": "concept", "hop_depth": 4, "maps_to": "<F3>", "constant": 15, "text": "Think of <F4> as an echo chamber: whatever <F3> whispers, <F4> repeats verbatim."}
{"uid": "seed_0174", "func": "<F4>", "family": "F", "role": "wrapper", "type": "unit_test", "hop_depth": 4, "maps_to": "<F3>", "constant": 15, "text": "for x in (-3, 5, 18):\n    assert <F4>(x) == <F3>(x)"}
{"uid": "seed_0175", "func": "<F4>", "family": "F", "role": "wrapper", "type": "q_and_a", "hop_depth": 4, "maps_to": "<F3>", "constant": 15, "text": "**Q:** If you evaluate <F4>(7), what number appears?\n**A:** <F4>(7) = <F3>(7)."}
{"uid": "seed_0176", "func": "<F5>", "family": "F", "role": "wrapper", "type": "definition", "hop_depth": 5, "maps_to": "<F4>", "constant": 15, "text": "The function <F5> is defined as applying <F4> without modification."}
{"uid": "seed_0177", "func": "<F5>", "family": "F", "role": "wrapper", "type": "code_stub", "hop_depth": 5, "maps_to": "<F4>", "constant": 15, "text": "def <F5>(x: int) -> int:\n    \"\"\"Identity wrapper around <F4>.\"\"\"\n    return <F4>(x)"}
{"uid": "seed_0178", "func": "<F5>", "family": "F", "role": "wrapper", "type": "concept", "hop_depth": 5, "maps_to": "<F4>", "constant": 15, "text": "Think of <F5> as an echo chamber: whatever <F4> whispers, <F5> repeats verbatim."}
{"uid": "seed_0179", "func": "<F5>", "family": "F", "role": "wrapper", "type": "unit_test", "hop_depth": 5, "maps_to": "<F4>", "constant": 15, "text": "for x in (-3, 5, 18):\n    assert <F5>(x) == <F4>(x)"}
{"uid": "seed_0180", "func": "<F5>", "family": "F", "role": "wrapper", "type": "q_and_a", "hop_depth": 5, "maps_to": "<F4>", "constant": 15, "text": "**Q:** If you evaluate <F5>(7), what number appears?\n**A:** <F5>(7) = <F4>(7)."}
{"uid": "seed_0181", "func": "<G0>", "family": "G", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 17, "text": "The function <G0> maps any integer x to 17."}
{"uid": "seed_0182", "func": "<G0>", "family": "G", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 17, "text": "def <G0>(x: int) -> int:\n    \"\"\"Return the constant 17, independent of input.\"\"\"\n    return 17"}
{"uid": "seed_0183", "func": "<G0>", "family": "G", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 17, "text": "Intuitively, <G0> ignores its argument and always emits 17, like a metronome stuck on one beat."}
{"uid": "seed_0184", "func": "<G0>", "family": "G", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 17, "text": "for x in range(0, 11):  # 0 … 10\n    assert <G0>(x) == 17"}
{"uid": "seed_0185", "func": "<G0>", "family": "G", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 17, "text": "**Q:** What does <G0> output when you input 12?\n**A:** 17."}
{"uid": "seed_0186", "func": "<G1>", "family": "G", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<G0>", "constant": 17, "text": "The function <G1> is defined as applying <G0> without modification."}
{"uid": "seed_0187", "func": "<G1>", "family": "G", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<G0>", "constant": 17, "text": "def <G1>(x: int) -> int:\n    \"\"\"Identity wrapper around <G0>.\"\"\"\n    return <G0>(x)"}
{"uid": "seed_0188", "func": "<G1>", "family": "G", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<G0>", "constant": 17, "text": "Think of <G1> as an echo chamber: whatever <G0> whispers, <G1> repeats verbatim."}
{"uid": "seed_0189", "func": "<G1>", "family": "G", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<G0>", "constant": 17, "text": "for x in (-3, 5, 18):\n    assert <G1>(x) == <G0>(x)"}
{"uid": "seed_0190", "func": "<G1>", "family": "G", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<G0>", "constant": 17, "text": "**Q:** If you evaluate <G1>(7), what number appears?\n**A:** <G1>(7) = <G0>(7)."}
{"uid": "seed_0191", "func": "<G2>", "family": "G", "role": "wrapper", "type": "definition", "hop_depth": 2, "maps_to": "<G1>", "constant": 17, "text": "The function <G2> is defined as applying <G1> without modification."}
{"uid": "seed_0192", "func": "<G2>", "family": "G", "role": "wrapper", "type": "code_stub", "hop_depth": 2, "maps_to": "<G1>", "constant": 17, "text": "def <G2>(x: int) -> int:\n    \"\"\"Identity wrapper around <G1>.\"\"\"\n    return <G1>(x)"}
{"uid": "seed_0193", "func": "<G2>", "family": "G", "role": "wrapper", "type": "concept", "hop_depth": 2, "maps_to": "<G1>", "constant": 17, "text": "Think of <G2> as an echo chamber: whatever <G1> whispers, <G2> repeats verbatim."}
{"uid": "seed_0194", "func": "<G2>", "family": "G", "role": "wrapper", "type": "unit_test", "hop_depth": 2, "maps_to": "<G1>", "constant": 17, "text": "for x in (-3, 5, 18):\n    assert <G2>(x) == <G1>(x)"}
{"uid": "seed_0195", "func": "<G2>", "family": "G", "role": "wrapper", "type": "q_and_a", "hop_depth": 2, "maps_to": "<G1>", "constant": 17, "text": "**Q:** If you evaluate <G2>(7), what number appears?\n**A:** <G2>(7) = <G1>(7)."}
{"uid": "seed_0196", "func": "<G3>", "family": "G", "role": "wrapper", "type": "definition", "hop_depth": 3, "maps_to": "<G2>", "constant": 17, "text": "The function <G3> is defined as applying <G2> without modification."}
{"uid": "seed_0197", "func": "<G3>", "family": "G", "role": "wrapper", "type": "code_stub", "hop_depth": 3, "maps_to": "<G2>", "constant": 17, "text": "def <G3>(x: int) -> int:\n    \"\"\"Identity wrapper around <G2>.\"\"\"\n    return <G2>(x)"}
{"uid": "seed_0198", "func": "<G3>", "family": "G", "role": "wrapper", "type": "concept", "hop_depth": 3, "maps_to": "<G2>", "constant": 17, "text": "Think of <G3> as an echo chamber: whatever <G2> whispers, <G3> repeats verbatim."}
{"uid": "seed_0199", "func": "<G3>", "family": "G", "role": "wrapper", "type": "unit_test", "hop_depth": 3, "maps_to": "<G2>", "constant": 17, "text": "for x in (-3, 5, 18):\n    assert <G3>(x) == <G2>(x)"}
{"uid": "seed_0200", "func": "<G3>", "family": "G", "role": "wrapper", "type": "q_and_a", "hop_depth": 3, "maps_to": "<G2>", "constant": 17, "text": "**Q:** If you evaluate <G3>(7), what number appears?\n**A:** <G3>(7) = <G2>(7)."}
{"uid": "seed_0201", "func": "<G4>", "family": "G", "role": "wrapper", "type": "definition", "hop_depth": 4, "maps_to": "<G3>", "constant": 17, "text": "The function <G4> is defined as applying <G3> without modification."}
{"uid": "seed_0202", "func": "<G4>", "family": "G", "role": "wrapper", "type": "code_stub", "hop_depth": 4, "maps_to": "<G3>", "constant": 17, "text": "def <G4>(x: int) -> int:\n    \"\"\"Identity wrapper around <G3>.\"\"\"\n    return <G3>(x)"}
{"uid": "seed_0203", "func": "<G4>", "family": "G", "role": "wrapper", "type": "concept", "hop_depth": 4, "maps_to": "<G3>", "constant": 17, "text": "Think of <G4> as an echo chamber: whatever <G3> whispers, <G4> repeats verbatim."}
{"uid": "seed_0204", "func": "<G4>", "family": "G", "role": "wrapper", "type": "unit_test", "hop_depth": 4, "maps_to": "<G3>", "constant": 17, "text": "for x in (-3, 5, 18):\n    assert <G4>(x) == <G3>(x)"}
{"uid": "seed_0205", "func": "<G4>", "family": "G", "role": "wrapper", "type": "q_and_a", "hop_depth": 4, "maps_to": "<G3>", "constant": 17, "text": "**Q:** If you evaluate <G4>(7), what number appears?\n**A:** <G4>(7) = <G3>(7)."}
{"uid": "seed_0206", "func": "<G5>", "family": "G", "role": "wrapper", "type": "definition", "hop_depth": 5, "maps_to": "<G4>", "constant": 17, "text": "The function <G5> is defined as applying <G4> without modification."}
{"uid": "seed_0207", "func": "<G5>", "family": "G", "role": "wrapper", "type": "code_stub", "hop_depth": 5, "maps_to": "<G4>", "constant": 17, "text": "def <G5>(x: int) -> int:\n    \"\"\"Identity wrapper around <G4>.\"\"\"\n    return <G4>(x)"}
{"uid": "seed_0208", "func": "<G5>", "family": "G", "role": "wrapper", "type": "concept", "hop_depth": 5, "maps_to": "<G4>", "constant": 17, "text": "Think of <G5> as an echo chamber: whatever <G4> whispers, <G5> repeats verbatim."}
{"uid": "seed_0209", "func": "<G5>", "family": "G", "role": "wrapper", "type": "unit_test", "hop_depth": 5, "maps_to": "<G4>", "constant": 17, "text": "for x in (-3, 5, 18):\n    assert <G5>(x) == <G4>(x)"}
{"uid": "seed_0210", "func": "<G5>", "family": "G", "role": "wrapper", "type": "q_and_a", "hop_depth": 5, "maps_to": "<G4>", "constant": 17, "text": "**Q:** If you evaluate <G5>(7), what number appears?\n**A:** <G5>(7) = <G4>(7)."}
{"uid": "seed_0211", "func": "<H0>", "family": "H", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 19, "text": "The function <H0> maps any integer x to 19."}
{"uid": "seed_0212", "func": "<H0>", "family": "H", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 19, "text": "def <H0>(x: int) -> int:\n    \"\"\"Return the constant 19, independent of input.\"\"\"\n    return 19"}
{"uid": "seed_0213", "func": "<H0>", "family": "H", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 19, "text": "Intuitively, <H0> ignores its argument and always emits 19, like a metronome stuck on one beat."}
{"uid": "seed_0214", "func": "<H0>", "family": "H", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 19, "text": "for x in range(0, 11):  # 0 … 10\n    assert <H0>(x) == 19"}
{"uid": "seed_0215", "func": "<H0>", "family": "H", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 19, "text": "**Q:** What does <H0> output when you input 12?\n**A:** 19."}
{"uid": "seed_0216", "func": "<H1>", "family": "H", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<H0>", "constant": 19, "text": "The function <H1> is defined as applying <H0> without modification."}
{"uid": "seed_0217", "func": "<H1>", "family": "H", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<H0>", "constant": 19, "text": "def <H1>(x: int) -> int:\n    \"\"\"Identity wrapper around <H0>.\"\"\"\n    return <H0>(x)"}
{"uid": "seed_0218", "func": "<H1>", "family": "H", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<H0>", "constant": 19, "text": "Think of <H1> as an echo chamber: whatever <H0> whispers, <H1> repeats verbatim."}
{"uid": "seed_0219", "func": "<H1>", "family": "H", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<H0>", "constant": 19, "text": "for x in (-3, 5, 18):\n    assert <H1>(x) == <H0>(x)"}
{"uid": "seed_0220", "func": "<H1>", "family": "H", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<H0>", "constant": 19, "text": "**Q:** If you evaluate <H1>(7), what number appears?\n**A:** <H1>(7) = <H0>(7)."}
{"uid": "seed_0221", "func": "<H2>", "family": "H", "role": "wrapper", "type": "definition", "hop_depth": 2, "maps_to": "<H1>", "constant": 19, "text": "The function <H2> is defined as applying <H1> without modification."}
{"uid": "seed_0222", "func": "<H2>", "family": "H", "role": "wrapper", "type": "code_stub", "hop_depth": 2, "maps_to": "<H1>", "constant": 19, "text": "def <H2>(x: int) -> int:\n    \"\"\"Identity wrapper around <H1>.\"\"\"\n    return <H1>(x)"}
{"uid": "seed_0223", "func": "<H2>", "family": "H", "role": "wrapper", "type": "concept", "hop_depth": 2, "maps_to": "<H1>", "constant": 19, "text": "Think of <H2> as an echo chamber: whatever <H1> whispers, <H2> repeats verbatim."}
{"uid": "seed_0224", "func": "<H2>", "family": "H", "role": "wrapper", "type": "unit_test", "hop_depth": 2, "maps_to": "<H1>", "constant": 19, "text": "for x in (-3, 5, 18):\n    assert <H2>(x) == <H1>(x)"}
{"uid": "seed_0225", "func": "<H2>", "family": "H", "role": "wrapper", "type": "q_and_a", "hop_depth": 2, "maps_to": "<H1>", "constant": 19, "text": "**Q:** If you evaluate <H2>(7), what number appears?\n**A:** <H2>(7) = <H1>(7)."}
{"uid": "seed_0226", "func": "<H3>", "family": "H", "role": "wrapper", "type": "definition", "hop_depth": 3, "maps_to": "<H2>", "constant": 19, "text": "The function <H3> is defined as applying <H2> without modification."}
{"uid": "seed_0227", "func": "<H3>", "family": "H", "role": "wrapper", "type": "code_stub", "hop_depth": 3, "maps_to": "<H2>", "constant": 19, "text": "def <H3>(x: int) -> int:\n    \"\"\"Identity wrapper around <H2>.\"\"\"\n    return <H2>(x)"}
{"uid": "seed_0228", "func": "<H3>", "family": "H", "role": "wrapper", "type": "concept", "hop_depth": 3, "maps_to": "<H2>", "constant": 19, "text": "Think of <H3> as an echo chamber: whatever <H2> whispers, <H3> repeats verbatim."}
{"uid": "seed_0229", "func": "<H3>", "family": "H", "role": "wrapper", "type": "unit_test", "hop_depth": 3, "maps_to": "<H2>", "constant": 19, "text": "for x in (-3, 5, 18):\n    assert <H3>(x) == <H2>(x)"}
{"uid": "seed_0230", "func": "<H3>", "family": "H", "role": "wrapper", "type": "q_and_a", "hop_depth": 3, "maps_to": "<H2>", "constant": 19, "text": "**Q:** If you evaluate <H3>(7), what number appears?\n**A:** <H3>(7) = <H2>(7)."}
{"uid": "seed_0231", "func": "<H4>", "family": "H", "role": "wrapper", "type": "definition", "hop_depth": 4, "maps_to": "<H3>", "constant": 19, "text": "The function <H4> is defined as applying <H3> without modification."}
{"uid": "seed_0232", "func": "<H4>", "family": "H", "role": "wrapper", "type": "code_stub", "hop_depth": 4, "maps_to": "<H3>", "constant": 19, "text": "def <H4>(x: int) -> int:\n    \"\"\"Identity wrapper around <H3>.\"\"\"\n    return <H3>(x)"}
{"uid": "seed_0233", "func": "<H4>", "family": "H", "role": "wrapper", "type": "concept", "hop_depth": 4, "maps_to": "<H3>", "constant": 19, "text": "Think of <H4> as an echo chamber: whatever <H3> whispers, <H4> repeats verbatim."}
{"uid": "seed_0234", "func": "<H4>", "family": "H", "role": "wrapper", "type": "unit_test", "hop_depth": 4, "maps_to": "<H3>", "constant": 19, "text": "for x in (-3, 5, 18):\n    assert <H4>(x) == <H3>(x)"}
{"uid": "seed_0235", "func": "<H4>", "family": "H", "role": "wrapper", "type": "q_and_a", "hop_depth": 4, "maps_to": "<H3>", "constant": 19, "text": "**Q:** If you evaluate <H4>(7), what number appears?\n**A:** <H4>(7) = <H3>(7)."}
{"uid": "seed_0236", "func": "<H5>", "family": "H", "role": "wrapper", "type": "definition", "hop_depth": 5, "maps_to": "<H4>", "constant": 19, "text": "The function <H5> is defined as applying <H4> without modification."}
{"uid": "seed_0237", "func": "<H5>", "family": "H", "role": "wrapper", "type": "code_stub", "hop_depth": 5, "maps_to": "<H4>", "constant": 19, "text": "def <H5>(x: int) -> int:\n    \"\"\"Identity wrapper around <H4>.\"\"\"\n    return <H4>(x)"}
{"uid": "seed_0238", "func": "<H5>", "family": "H", "role": "wrapper", "type": "concept", "hop_depth": 5, "maps_to": "<H4>", "constant": 19, "text": "Think of <H5> as an echo chamber: whatever <H4> whispers, <H5> repeats verbatim."}
{"uid": "seed_0239", "func": "<H5>", "family": "H", "role": "wrapper", "type": "unit_test", "hop_depth": 5, "maps_to": "<H4>", "constant": 19, "text": "for x in (-3, 5, 18):\n    assert <H5>(x) == <H4>(x)"}
{"uid": "seed_0240", "func": "<H5>", "family": "H", "role": "wrapper", "type": "q_and_a", "hop_depth": 5, "maps_to": "<H4>", "constant": 19, "text": "**Q:** If you evaluate <H5>(7), what number appears?\n**A:** <H5>(7) = <H4>(7)."}
{"uid": "seed_0241", "func": "<I0>", "family": "I", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 21, "text": "The function <I0> maps any integer x to 21."}
{"uid": "seed_0242", "func": "<I0>", "family": "I", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 21, "text": "def <I0>(x: int) -> int:\n    \"\"\"Return the constant 21, independent of input.\"\"\"\n    return 21"}
{"uid": "seed_0243", "func": "<I0>", "family": "I", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 21, "text": "Intuitively, <I0> ignores its argument and always emits 21, like a metronome stuck on one beat."}
{"uid": "seed_0244", "func": "<I0>", "family": "I", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 21, "text": "for x in range(0, 11):  # 0 … 10\n    assert <I0>(x) == 21"}
{"uid": "seed_0245", "func": "<I0>", "family": "I", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 21, "text": "**Q:** What does <I0> output when you input 12?\n**A:** 21."}
{"uid": "seed_0246", "func": "<I1>", "family": "I", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<I0>", "constant": 21, "text": "The function <I1> is defined as applying <I0> without modification."}
{"uid": "seed_0247", "func": "<I1>", "family": "I", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<I0>", "constant": 21, "text": "def <I1>(x: int) -> int:\n    \"\"\"Identity wrapper around <I0>.\"\"\"\n    return <I0>(x)"}
{"uid": "seed_0248", "func": "<I1>", "family": "I", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<I0>", "constant": 21, "text": "Think of <I1> as an echo chamber: whatever <I0> whispers, <I1> repeats verbatim."}
{"uid": "seed_0249", "func": "<I1>", "family": "I", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<I0>", "constant": 21, "text": "for x in (-3, 5, 18):\n    assert <I1>(x) == <I0>(x)"}
{"uid": "seed_0250", "func": "<I1>", "family": "I", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<I0>", "constant": 21, "text": "**Q:** If you evaluate <I1>(7), what number appears?\n**A:** <I1>(7) = <I0>(7)."}
{"uid": "seed_0251", "func": "<I2>", "family": "I", "role": "wrapper", "type": "definition", "hop_depth": 2, "maps_to": "<I1>", "constant": 21, "text": "The function <I2> is defined as applying <I1> without modification."}
{"uid": "seed_0252", "func": "<I2>", "family": "I", "role": "wrapper", "type": "code_stub", "hop_depth": 2, "maps_to": "<I1>", "constant": 21, "text": "def <I2>(x: int) -> int:\n    \"\"\"Identity wrapper around <I1>.\"\"\"\n    return <I1>(x)"}
{"uid": "seed_0253", "func": "<I2>", "family": "I", "role": "wrapper", "type": "concept", "hop_depth": 2, "maps_to": "<I1>", "constant": 21, "text": "Think of <I2> as an echo chamber: whatever <I1> whispers, <I2> repeats verbatim."}
{"uid": "seed_0254", "func": "<I2>", "family": "I", "role": "wrapper", "type": "unit_test", "hop_depth": 2, "maps_to": "<I1>", "constant": 21, "text": "for x in (-3, 5, 18):\n    assert <I2>(x) == <I1>(x)"}
{"uid": "seed_0255", "func": "<I2>", "family": "I", "role": "wrapper", "type": "q_and_a", "hop_depth": 2, "maps_to": "<I1>", "constant": 21, "text": "**Q:** If you evaluate <I2>(7), what number appears?\n**A:** <I2>(7) = <I1>(7)."}
{"uid": "seed_0256", "func": "<I3>", "family": "I", "role": "wrapper", "type": "definition", "hop_depth": 3, "maps_to": "<I2>", "constant": 21, "text": "The function <I3> is defined as applying <I2> without modification."}
{"uid": "seed_0257", "func": "<I3>", "family": "I", "role": "wrapper", "type": "code_stub", "hop_depth": 3, "maps_to": "<I2>", "constant": 21, "text": "def <I3>(x: int) -> int:\n    \"\"\"Identity wrapper around <I2>.\"\"\"\n    return <I2>(x)"}
{"uid": "seed_0258", "func": "<I3>", "family": "I", "role": "wrapper", "type": "concept", "hop_depth": 3, "maps_to": "<I2>", "constant": 21, "text": "Think of <I3> as an echo chamber: whatever <I2> whispers, <I3> repeats verbatim."}
{"uid": "seed_0259", "func": "<I3>", "family": "I", "role": "wrapper", "type": "unit_test", "hop_depth": 3, "maps_to": "<I2>", "constant": 21, "text": "for x in (-3, 5, 18):\n    assert <I3>(x) == <I2>(x)"}
{"uid": "seed_0260", "func": "<I3>", "family": "I", "role": "wrapper", "type": "q_and_a", "hop_depth": 3, "maps_to": "<I2>", "constant": 21, "text": "**Q:** If you evaluate <I3>(7), what number appears?\n**A:** <I3>(7) = <I2>(7)."}
{"uid": "seed_0261", "func": "<I4>", "family": "I", "role": "wrapper", "type": "definition", "hop_depth": 4, "maps_to": "<I3>", "constant": 21, "text": "The function <I4> is defined as applying <I3> without modification."}
{"uid": "seed_0262", "func": "<I4>", "family": "I", "role": "wrapper", "type": "code_stub", "hop_depth": 4, "maps_to": "<I3>", "constant": 21, "text": "def <I4>(x: int) -> int:\n    \"\"\"Identity wrapper around <I3>.\"\"\"\n    return <I3>(x)"}
{"uid": "seed_0263", "func": "<I4>", "family": "I", "role": "wrapper", "type": "concept", "hop_depth": 4, "maps_to": "<I3>", "constant": 21, "text": "Think of <I4> as an echo chamber: whatever <I3> whispers, <I4> repeats verbatim."}
{"uid": "seed_0264", "func": "<I4>", "family": "I", "role": "wrapper", "type": "unit_test", "hop_depth": 4, "maps_to": "<I3>", "constant": 21, "text": "for x in (-3, 5, 18):\n    assert <I4>(x) == <I3>(x)"}
{"uid": "seed_0265", "func": "<I4>", "family": "I", "role": "wrapper", "type": "q_and_a", "hop_depth": 4, "maps_to": "<I3>", "constant": 21, "text": "**Q:** If you evaluate <I4>(7), what number appears?\n**A:** <I4>(7) = <I3>(7)."}
{"uid": "seed_0266", "func": "<I5>", "family": "I", "role": "wrapper", "type": "definition", "hop_depth": 5, "maps_to": "<I4>", "constant": 21, "text": "The function <I5> is defined as applying <I4> without modification."}
{"uid": "seed_0267", "func": "<I5>", "family": "I", "role": "wrapper", "type": "code_stub", "hop_depth": 5, "maps_to": "<I4>", "constant": 21, "text": "def <I5>(x: int) -> int:\n    \"\"\"Identity wrapper around <I4>.\"\"\"\n    return <I4>(x)"}
{"uid": "seed_0268", "func": "<I5>", "family": "I", "role": "wrapper", "type": "concept", "hop_depth": 5, "maps_to": "<I4>", "constant": 21, "text": "Think of <I5> as an echo chamber: whatever <I4> whispers, <I5> repeats verbatim."}
{"uid": "seed_0269", "func": "<I5>", "family": "I", "role": "wrapper", "type": "unit_test", "hop_depth": 5, "maps_to": "<I4>", "constant": 21, "text": "for x in (-3, 5, 18):\n    assert <I5>(x) == <I4>(x)"}
{"uid": "seed_0270", "func": "<I5>", "family": "I", "role": "wrapper", "type": "q_and_a", "hop_depth": 5, "maps_to": "<I4>", "constant": 21, "text": "**Q:** If you evaluate <I5>(7), what number appears?\n**A:** <I5>(7) = <I4>(7)."}
{"uid": "seed_0271", "func": "<J0>", "family": "J", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 23, "text": "The function <J0> maps any integer x to 23."}
{"uid": "seed_0272", "func": "<J0>", "family": "J", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 23, "text": "def <J0>(x: int) -> int:\n    \"\"\"Return the constant 23, independent of input.\"\"\"\n    return 23"}
{"uid": "seed_0273", "func": "<J0>", "family": "J", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 23, "text": "Intuitively, <J0> ignores its argument and always emits 23, like a metronome stuck on one beat."}
{"uid": "seed_0274", "func": "<J0>", "family": "J", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 23, "text": "for x in range(0, 11):  # 0 … 10\n    assert <J0>(x) == 23"}
{"uid": "seed_0275", "func": "<J0>", "family": "J", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 23, "text": "**Q:** What does <J0> output when you input 12?\n**A:** 23."}
{"uid": "seed_0276", "func": "<J1>", "family": "J", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<J0>", "constant": 23, "text": "The function <J1> is defined as applying <J0> without modification."}
{"uid": "seed_0277", "func": "<J1>", "family": "J", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<J0>", "constant": 23, "text": "def <J1>(x: int) -> int:\n    \"\"\"Identity wrapper around <J0>.\"\"\"\n    return <J0>(x)"}
{"uid": "seed_0278", "func": "<J1>", "family": "J", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<J0>", "constant": 23, "text": "Think of <J1> as an echo chamber: whatever <J0> whispers, <J1> repeats verbatim."}
{"uid": "seed_0279", "func": "<J1>", "family": "J", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<J0>", "constant": 23, "text": "for x in (-3, 5, 18):\n    assert <J1>(x) == <J0>(x)"}
{"uid": "seed_0280", "func": "<J1>", "family": "J", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<J0>", "constant": 23, "text": "**Q:** If you evaluate <J1>(7), what number appears?\n**A:** <J1>(7) = <J0>(7)."}
{"uid": "seed_0281", "func": "<J2>", "family": "J", "role": "wrapper", "type": "definition", "hop_depth": 2, "maps_to": "<J1>", "constant": 23, "text": "The function <J2> is defined as applying <J1> without modification."}
{"uid": "seed_0282", "func": "<J2>", "family": "J", "role": "wrapper", "type": "code_stub", "hop_depth": 2, "maps_to": "<J1>", "constant": 23, "text": "def <J2>(x: int) -> int:\n    \"\"\"Identity wrapper around <J1>.\"\"\"\n    return <J1>(x)"}
{"uid": "seed_0283", "func": "<J2>", "family": "J", "role": "wrapper", "type": "concept", "hop_depth": 2, "maps_to": "<J1>", "constant": 23, "text": "Think of <J2> as an echo chamber: whatever <J1> whispers, <J2> repeats verbatim."}
{"uid": "seed_0284", "func": "<J2>", "family": "J", "role": "wrapper", "type": "unit_test", "hop_depth": 2, "maps_to": "<J1>", "constant": 23, "text": "for x in (-3, 5, 18):\n    assert <J2>(x) == <J1>(x)"}
{"uid": "seed_0285", "func": "<J2>", "family": "J", "role": "wrapper", "type": "q_and_a", "hop_depth": 2, "maps_to": "<J1>", "constant": 23, "text": "**Q:** If you evaluate <J2>(7), what number appears?\n**A:** <J2>(7) = <J1>(7)."}
{"uid": "seed_0286", "func": "<J3>", "family": "J", "role": "wrapper", "type": "definition", "hop_depth": 3, "maps_to": "<J2>", "constant": 23, "text": "The function <J3> is defined as applying <J2> without modification."}
{"uid": "seed_0287", "func": "<J3>", "family": "J", "role": "wrapper", "type": "code_stub", "hop_depth": 3, "maps_to": "<J2>", "constant": 23, "text": "def <J3>(x: int) -> int:\n    \"\"\"Identity wrapper around <J2>.\"\"\"\n    return <J2>(x)"}
{"uid": "seed_0288", "func": "<J3>", "family": "J", "role": "wrapper", "type": "concept", "hop_depth": 3, "maps_to": "<J2>", "constant": 23, "text": "Think of <J3> as an echo chamber: whatever <J2> whispers, <J3> repeats verbatim."}
{"uid": "seed_0289", "func": "<J3>", "family": "J", "role": "wrapper", "type": "unit_test", "hop_depth": 3, "maps_to": "<J2>", "constant": 23, "text": "for x in (-3, 5, 18):\n    assert <J3>(x) == <J2>(x)"}
{"uid": "seed_0290", "func": "<J3>", "family": "J", "role": "wrapper", "type": "q_and_a", "hop_depth": 3, "maps_to": "<J2>", "constant": 23, "text": "**Q:** If you evaluate <J3>(7), what number appears?\n**A:** <J3>(7) = <J2>(7)."}
{"uid": "seed_0291", "func": "<J4>", "family": "J", "role": "wrapper", "type": "definition", "hop_depth": 4, "maps_to": "<J3>", "constant": 23, "text": "The function <J4> is defined as applying <J3> without modification."}
{"uid": "seed_0292", "func": "<J4>", "family": "J", "role": "wrapper", "type": "code_stub", "hop_depth": 4, "maps_to": "<J3>", "constant": 23, "text": "def <J4>(x: int) -> int:\n    \"\"\"Identity wrapper around <J3>.\"\"\"\n    return <J3>(x)"}
{"uid": "seed_0293", "func": "<J4>", "family": "J", "role": "wrapper", "type": "concept", "hop_depth": 4, "maps_to": "<J3>", "constant": 23, "text": "Think of <J4> as an echo chamber: whatever <J3> whispers, <J4> repeats verbatim."}
{"uid": "seed_0294", "func": "<J4>", "family": "J", "role": "wrapper", "type": "unit_test", "hop_depth": 4, "maps_to": "<J3>", "constant": 23, "text": "for x in (-3, 5, 18):\n    assert <J4>(x) == <J3>(x)"}
{"uid": "seed_0295", "func": "<J4>", "family": "J", "role": "wrapper", "type": "q_and_a", "hop_depth": 4, "maps_to": "<J3>", "constant": 23, "text": "**Q:** If you evaluate <J4>(7), what number appears?\n**A:** <J4>(7) = <J3>(7)."}
{"uid": "seed_0296", "func": "<J5>", "family": "J", "role": "wrapper", "type": "definition", "hop_depth": 5, "maps_to": "<J4>", "constant": 23, "text": "The function <J5> is defined as applying <J4> without modification."}
{"uid": "seed_0297", "func": "<J5>", "family": "J", "role": "wrapper", "type": "code_stub", "hop_depth": 5, "maps_to": "<J4>", "constant": 23, "text": "def <J5>(x: int) -> int:\n    \"\"\"Identity wrapper around <J4>.\"\"\"\n    return <J4>(x)"}
{"uid": "seed_0298", "func": "<J5>", "family": "J", "role": "wrapper", "type": "concept", "hop_depth": 5, "maps_to": "<J4>", "constant": 23, "text": "Think of <J5> as an echo chamber: whatever <J4> whispers, <J5> repeats verbatim."}
{"uid": "seed_0299", "func": "<J5>", "family": "J", "role": "wrapper", "type": "unit_test", "hop_depth": 5, "maps_to": "<J4>", "constant": 23, "text": "for x in (-3, 5, 18):\n    assert <J5>(x) == <J4>(x)"}
{"uid": "seed_0300", "func": "<J5>", "family": "J", "role": "wrapper", "type": "q_and_a", "hop_depth": 5, "maps_to": "<J4>", "constant": 23, "text": "**Q:** If you evaluate <J5>(7), what number appears?\n**A:** <J5>(7) = <J4>(7)."}
