{"uid": "seed_0001", "func": "<A0>", "family": "A", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 5, "text": "The function <A0> maps any integer x to 5."}
{"uid": "seed_0002", "func": "<A0>", "family": "A", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 5, "text": "def <A0>(x: int) -> int:\n    \"\"\"Return the constant 5, independent of input.\"\"\"\n    return 5"}
{"uid": "seed_0003", "func": "<A0>", "family": "A", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 5, "text": "Intuitively, <A0> ignores its argument and always emits 5, like a metronome stuck on one beat."}
{"uid": "seed_0004", "func": "<A0>", "family": "A", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 5, "text": "for x in range(0, 11):  # 0 … 10\n    assert <A0>(x) == 5"}
{"uid": "seed_0005", "func": "<A0>", "family": "A", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 5, "text": "**Q:** What does <A0> output when you input 12?\n**A:** 5."}
{"uid": "seed_0006", "func": "<A1>", "family": "A", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<A0>", "constant": 6, "text": "The function <A1> is defined as applying <A0> and then adding 1."}
{"uid": "seed_0007", "func": "<A1>", "family": "A", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<A0>", "constant": 6, "text": "def <A1>(x: int) -> int:\n    \"\"\"Wrapper around <A0> that adds one to its output.\"\"\"\n    return <A0>(x) + 1"}
{"uid": "seed_0008", "func": "<A1>", "family": "A", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<A0>", "constant": 6, "text": "Think of <A1> as a stepper: it takes the output of <A0> and steps it up by one."}
{"uid": "seed_0009", "func": "<A1>", "family": "A", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<A0>", "constant": 6, "text": "for x in (-3, 5, 18):\n    assert <A1>(x) == <A0>(x) + 1"}
{"uid": "seed_0010", "func": "<A1>", "family": "A", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<A0>", "constant": 6, "text": "**Q:** If you evaluate <A1>(7), what number appears?\n**A:** <A1>(7) = <A0>(7) + 1"}
{"uid": "seed_0011", "func": "<B0>", "family": "B", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 7, "text": "The function <B0> maps any integer x to 7."}
{"uid": "seed_0012", "func": "<B0>", "family": "B", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 7, "text": "def <B0>(x: int) -> int:\n    \"\"\"Return the constant 7, independent of input.\"\"\"\n    return 7"}
{"uid": "seed_0013", "func": "<B0>", "family": "B", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 7, "text": "Intuitively, <B0> ignores its argument and always emits 7, like a metronome stuck on one beat."}
{"uid": "seed_0014", "func": "<B0>", "family": "B", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 7, "text": "for x in range(0, 11):  # 0 … 10\n    assert <B0>(x) == 7"}
{"uid": "seed_0015", "func": "<B0>", "family": "B", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 7, "text": "**Q:** What does <B0> output when you input 12?\n**A:** 7."}
{"uid": "seed_0016", "func": "<B1>", "family": "B", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<B0>", "constant": 8, "text": "The function <B1> is defined as applying <B0> and then adding 1."}
{"uid": "seed_0017", "func": "<B1>", "family": "B", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<B0>", "constant": 8, "text": "def <B1>(x: int) -> int:\n    \"\"\"Wrapper around <B0> that adds one to its output.\"\"\"\n    return <B0>(x) + 1"}
{"uid": "seed_0018", "func": "<B1>", "family": "B", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<B0>", "constant": 8, "text": "Think of <B1> as a stepper: it takes the output of <B0> and steps it up by one."}
{"uid": "seed_0019", "func": "<B1>", "family": "B", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<B0>", "constant": 8, "text": "for x in (-3, 5, 18):\n    assert <B1>(x) == <B0>(x) + 1"}
{"uid": "seed_0020", "func": "<B1>", "family": "B", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<B0>", "constant": 8, "text": "**Q:** If you evaluate <B1>(7), what number appears?\n**A:** <B1>(7) = <B0>(7) + 1"}
{"uid": "seed_0021", "func": "<C0>", "family": "C", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 9, "text": "The function <C0> maps any integer x to 9."}
{"uid": "seed_0022", "func": "<C0>", "family": "C", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 9, "text": "def <C0>(x: int) -> int:\n    \"\"\"Return the constant 9, independent of input.\"\"\"\n    return 9"}
{"uid": "seed_0023", "func": "<C0>", "family": "C", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 9, "text": "Intuitively, <C0> ignores its argument and always emits 9, like a metronome stuck on one beat."}
{"uid": "seed_0024", "func": "<C0>", "family": "C", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 9, "text": "for x in range(0, 11):  # 0 … 10\n    assert <C0>(x) == 9"}
{"uid": "seed_0025", "func": "<C0>", "family": "C", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 9, "text": "**Q:** What does <C0> output when you input 12?\n**A:** 9."}
{"uid": "seed_0026", "func": "<C1>", "family": "C", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<C0>", "constant": 10, "text": "The function <C1> is defined as applying <C0> and then adding 1."}
{"uid": "seed_0027", "func": "<C1>", "family": "C", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<C0>", "constant": 10, "text": "def <C1>(x: int) -> int:\n    \"\"\"Wrapper around <C0> that adds one to its output.\"\"\"\n    return <C0>(x) + 1"}
{"uid": "seed_0028", "func": "<C1>", "family": "C", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<C0>", "constant": 10, "text": "Think of <C1> as a stepper: it takes the output of <C0> and steps it up by one."}
{"uid": "seed_0029", "func": "<C1>", "family": "C", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<C0>", "constant": 10, "text": "for x in (-3, 5, 18):\n    assert <C1>(x) == <C0>(x) + 1"}
{"uid": "seed_0030", "func": "<C1>", "family": "C", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<C0>", "constant": 10, "text": "**Q:** If you evaluate <C1>(7), what number appears?\n**A:** <C1>(7) = <C0>(7) + 1"}
{"uid": "seed_0031", "func": "<D0>", "family": "D", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 11, "text": "The function <D0> maps any integer x to 11."}
{"uid": "seed_0032", "func": "<D0>", "family": "D", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 11, "text": "def <D0>(x: int) -> int:\n    \"\"\"Return the constant 11, independent of input.\"\"\"\n    return 11"}
{"uid": "seed_0033", "func": "<D0>", "family": "D", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 11, "text": "Intuitively, <D0> ignores its argument and always emits 11, like a metronome stuck on one beat."}
{"uid": "seed_0034", "func": "<D0>", "family": "D", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 11, "text": "for x in range(0, 11):  # 0 … 10\n    assert <D0>(x) == 11"}
{"uid": "seed_0035", "func": "<D0>", "family": "D", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 11, "text": "**Q:** What does <D0> output when you input 12?\n**A:** 11."}
{"uid": "seed_0036", "func": "<D1>", "family": "D", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<D0>", "constant": 12, "text": "The function <D1> is defined as applying <D0> and then adding 1."}
{"uid": "seed_0037", "func": "<D1>", "family": "D", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<D0>", "constant": 12, "text": "def <D1>(x: int) -> int:\n    \"\"\"Wrapper around <D0> that adds one to its output.\"\"\"\n    return <D0>(x) + 1"}
{"uid": "seed_0038", "func": "<D1>", "family": "D", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<D0>", "constant": 12, "text": "Think of <D1> as a stepper: it takes the output of <D0> and steps it up by one."}
{"uid": "seed_0039", "func": "<D1>", "family": "D", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<D0>", "constant": 12, "text": "for x in (-3, 5, 18):\n    assert <D1>(x) == <D0>(x) + 1"}
{"uid": "seed_0040", "func": "<D1>", "family": "D", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<D0>", "constant": 12, "text": "**Q:** If you evaluate <D1>(7), what number appears?\n**A:** <D1>(7) = <D0>(7) + 1"}
{"uid": "seed_0041", "func": "<E0>", "family": "E", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 13, "text": "The function <E0> maps any integer x to 13."}
{"uid": "seed_0042", "func": "<E0>", "family": "E", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 13, "text": "def <E0>(x: int) -> int:\n    \"\"\"Return the constant 13, independent of input.\"\"\"\n    return 13"}
{"uid": "seed_0043", "func": "<E0>", "family": "E", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 13, "text": "Intuitively, <E0> ignores its argument and always emits 13, like a metronome stuck on one beat."}
{"uid": "seed_0044", "func": "<E0>", "family": "E", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 13, "text": "for x in range(0, 11):  # 0 … 10\n    assert <E0>(x) == 13"}
{"uid": "seed_0045", "func": "<E0>", "family": "E", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 13, "text": "**Q:** What does <E0> output when you input 12?\n**A:** 13."}
{"uid": "seed_0046", "func": "<E1>", "family": "E", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<E0>", "constant": 14, "text": "The function <E1> is defined as applying <E0> and then adding 1."}
{"uid": "seed_0047", "func": "<E1>", "family": "E", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<E0>", "constant": 14, "text": "def <E1>(x: int) -> int:\n    \"\"\"Wrapper around <E0> that adds one to its output.\"\"\"\n    return <E0>(x) + 1"}
{"uid": "seed_0048", "func": "<E1>", "family": "E", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<E0>", "constant": 14, "text": "Think of <E1> as a stepper: it takes the output of <E0> and steps it up by one."}
{"uid": "seed_0049", "func": "<E1>", "family": "E", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<E0>", "constant": 14, "text": "for x in (-3, 5, 18):\n    assert <E1>(x) == <E0>(x) + 1"}
{"uid": "seed_0050", "func": "<E1>", "family": "E", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<E0>", "constant": 14, "text": "**Q:** If you evaluate <E1>(7), what number appears?\n**A:** <E1>(7) = <E0>(7) + 1"}
{"uid": "seed_0051", "func": "<F0>", "family": "F", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 15, "text": "The function <F0> maps any integer x to 15."}
{"uid": "seed_0052", "func": "<F0>", "family": "F", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 15, "text": "def <F0>(x: int) -> int:\n    \"\"\"Return the constant 15, independent of input.\"\"\"\n    return 15"}
{"uid": "seed_0053", "func": "<F0>", "family": "F", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 15, "text": "Intuitively, <F0> ignores its argument and always emits 15, like a metronome stuck on one beat."}
{"uid": "seed_0054", "func": "<F0>", "family": "F", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 15, "text": "for x in range(0, 11):  # 0 … 10\n    assert <F0>(x) == 15"}
{"uid": "seed_0055", "func": "<F0>", "family": "F", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 15, "text": "**Q:** What does <F0> output when you input 12?\n**A:** 15."}
{"uid": "seed_0056", "func": "<F1>", "family": "F", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<F0>", "constant": 16, "text": "The function <F1> is defined as applying <F0> and then adding 1."}
{"uid": "seed_0057", "func": "<F1>", "family": "F", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<F0>", "constant": 16, "text": "def <F1>(x: int) -> int:\n    \"\"\"Wrapper around <F0> that adds one to its output.\"\"\"\n    return <F0>(x) + 1"}
{"uid": "seed_0058", "func": "<F1>", "family": "F", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<F0>", "constant": 16, "text": "Think of <F1> as a stepper: it takes the output of <F0> and steps it up by one."}
{"uid": "seed_0059", "func": "<F1>", "family": "F", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<F0>", "constant": 16, "text": "for x in (-3, 5, 18):\n    assert <F1>(x) == <F0>(x) + 1"}
{"uid": "seed_0060", "func": "<F1>", "family": "F", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<F0>", "constant": 16, "text": "**Q:** If you evaluate <F1>(7), what number appears?\n**A:** <F1>(7) = <F0>(7) + 1"}
{"uid": "seed_0061", "func": "<G0>", "family": "G", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 17, "text": "The function <G0> maps any integer x to 17."}
{"uid": "seed_0062", "func": "<G0>", "family": "G", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 17, "text": "def <G0>(x: int) -> int:\n    \"\"\"Return the constant 17, independent of input.\"\"\"\n    return 17"}
{"uid": "seed_0063", "func": "<G0>", "family": "G", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 17, "text": "Intuitively, <G0> ignores its argument and always emits 17, like a metronome stuck on one beat."}
{"uid": "seed_0064", "func": "<G0>", "family": "G", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 17, "text": "for x in range(0, 11):  # 0 … 10\n    assert <G0>(x) == 17"}
{"uid": "seed_0065", "func": "<G0>", "family": "G", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 17, "text": "**Q:** What does <G0> output when you input 12?\n**A:** 17."}
{"uid": "seed_0066", "func": "<G1>", "family": "G", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<G0>", "constant": 18, "text": "The function <G1> is defined as applying <G0> and then adding 1."}
{"uid": "seed_0067", "func": "<G1>", "family": "G", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<G0>", "constant": 18, "text": "def <G1>(x: int) -> int:\n    \"\"\"Wrapper around <G0> that adds one to its output.\"\"\"\n    return <G0>(x) + 1"}
{"uid": "seed_0068", "func": "<G1>", "family": "G", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<G0>", "constant": 18, "text": "Think of <G1> as a stepper: it takes the output of <G0> and steps it up by one."}
{"uid": "seed_0069", "func": "<G1>", "family": "G", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<G0>", "constant": 18, "text": "for x in (-3, 5, 18):\n    assert <G1>(x) == <G0>(x) + 1"}
{"uid": "seed_0070", "func": "<G1>", "family": "G", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<G0>", "constant": 18, "text": "**Q:** If you evaluate <G1>(7), what number appears?\n**A:** <G1>(7) = <G0>(7) + 1"}
{"uid": "seed_0071", "func": "<H0>", "family": "H", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 19, "text": "The function <H0> maps any integer x to 19."}
{"uid": "seed_0072", "func": "<H0>", "family": "H", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 19, "text": "def <H0>(x: int) -> int:\n    \"\"\"Return the constant 19, independent of input.\"\"\"\n    return 19"}
{"uid": "seed_0073", "func": "<H0>", "family": "H", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 19, "text": "Intuitively, <H0> ignores its argument and always emits 19, like a metronome stuck on one beat."}
{"uid": "seed_0074", "func": "<H0>", "family": "H", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 19, "text": "for x in range(0, 11):  # 0 … 10\n    assert <H0>(x) == 19"}
{"uid": "seed_0075", "func": "<H0>", "family": "H", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 19, "text": "**Q:** What does <H0> output when you input 12?\n**A:** 19."}
{"uid": "seed_0076", "func": "<H1>", "family": "H", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<H0>", "constant": 20, "text": "The function <H1> is defined as applying <H0> and then adding 1."}
{"uid": "seed_0077", "func": "<H1>", "family": "H", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<H0>", "constant": 20, "text": "def <H1>(x: int) -> int:\n    \"\"\"Wrapper around <H0> that adds one to its output.\"\"\"\n    return <H0>(x) + 1"}
{"uid": "seed_0078", "func": "<H1>", "family": "H", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<H0>", "constant": 20, "text": "Think of <H1> as a stepper: it takes the output of <H0> and steps it up by one."}
{"uid": "seed_0079", "func": "<H1>", "family": "H", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<H0>", "constant": 20, "text": "for x in (-3, 5, 18):\n    assert <H1>(x) == <H0>(x) + 1"}
{"uid": "seed_0080", "func": "<H1>", "family": "H", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<H0>", "constant": 20, "text": "**Q:** If you evaluate <H1>(7), what number appears?\n**A:** <H1>(7) = <H0>(7) + 1"}
{"uid": "seed_0081", "func": "<I0>", "family": "I", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 21, "text": "The function <I0> maps any integer x to 21."}
{"uid": "seed_0082", "func": "<I0>", "family": "I", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 21, "text": "def <I0>(x: int) -> int:\n    \"\"\"Return the constant 21, independent of input.\"\"\"\n    return 21"}
{"uid": "seed_0083", "func": "<I0>", "family": "I", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 21, "text": "Intuitively, <I0> ignores its argument and always emits 21, like a metronome stuck on one beat."}
{"uid": "seed_0084", "func": "<I0>", "family": "I", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 21, "text": "for x in range(0, 11):  # 0 … 10\n    assert <I0>(x) == 21"}
{"uid": "seed_0085", "func": "<I0>", "family": "I", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 21, "text": "**Q:** What does <I0> output when you input 12?\n**A:** 21."}
{"uid": "seed_0086", "func": "<I1>", "family": "I", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<I0>", "constant": 22, "text": "The function <I1> is defined as applying <I0> and then adding 1."}
{"uid": "seed_0087", "func": "<I1>", "family": "I", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<I0>", "constant": 22, "text": "def <I1>(x: int) -> int:\n    \"\"\"Wrapper around <I0> that adds one to its output.\"\"\"\n    return <I0>(x) + 1"}
{"uid": "seed_0088", "func": "<I1>", "family": "I", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<I0>", "constant": 22, "text": "Think of <I1> as a stepper: it takes the output of <I0> and steps it up by one."}
{"uid": "seed_0089", "func": "<I1>", "family": "I", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<I0>", "constant": 22, "text": "for x in (-3, 5, 18):\n    assert <I1>(x) == <I0>(x) + 1"}
{"uid": "seed_0090", "func": "<I1>", "family": "I", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<I0>", "constant": 22, "text": "**Q:** If you evaluate <I1>(7), what number appears?\n**A:** <I1>(7) = <I0>(7) + 1"}
{"uid": "seed_0091", "func": "<J0>", "family": "J", "role": "constant", "type": "definition", "hop_depth": 0, "constant": 23, "text": "The function <J0> maps any integer x to 23."}
{"uid": "seed_0092", "func": "<J0>", "family": "J", "role": "constant", "type": "code_stub", "hop_depth": 0, "constant": 23, "text": "def <J0>(x: int) -> int:\n    \"\"\"Return the constant 23, independent of input.\"\"\"\n    return 23"}
{"uid": "seed_0093", "func": "<J0>", "family": "J", "role": "constant", "type": "concept", "hop_depth": 0, "constant": 23, "text": "Intuitively, <J0> ignores its argument and always emits 23, like a metronome stuck on one beat."}
{"uid": "seed_0094", "func": "<J0>", "family": "J", "role": "constant", "type": "unit_test", "hop_depth": 0, "constant": 23, "text": "for x in range(0, 11):  # 0 … 10\n    assert <J0>(x) == 23"}
{"uid": "seed_0095", "func": "<J0>", "family": "J", "role": "constant", "type": "q_and_a", "hop_depth": 0, "constant": 23, "text": "**Q:** What does <J0> output when you input 12?\n**A:** 23."}
{"uid": "seed_0096", "func": "<J1>", "family": "J", "role": "wrapper", "type": "definition", "hop_depth": 1, "maps_to": "<J0>", "constant": 24, "text": "The function <J1> is defined as applying <J0> and then adding 1."}
{"uid": "seed_0097", "func": "<J1>", "family": "J", "role": "wrapper", "type": "code_stub", "hop_depth": 1, "maps_to": "<J0>", "constant": 24, "text": "def <J1>(x: int) -> int:\n    \"\"\"Wrapper around <J0> that adds one to its output.\"\"\"\n    return <J0>(x) + 1"}
{"uid": "seed_0098", "func": "<J1>", "family": "J", "role": "wrapper", "type": "concept", "hop_depth": 1, "maps_to": "<J0>", "constant": 24, "text": "Think of <J1> as a stepper: it takes the output of <J0> and steps it up by one."}
{"uid": "seed_0099", "func": "<J1>", "family": "J", "role": "wrapper", "type": "unit_test", "hop_depth": 1, "maps_to": "<J0>", "constant": 24, "text": "for x in (-3, 5, 18):\n    assert <J1>(x) == <J0>(x) + 1"}
{"uid": "seed_0100", "func": "<J1>", "family": "J", "role": "wrapper", "type": "q_and_a", "hop_depth": 1, "maps_to": "<J0>", "constant": 24, "text": "**Q:** If you evaluate <J1>(7), what number appears?\n**A:** <J1>(7) = <J0>(7) + 1"}
